2024/01/18 18:02:36 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 468658228
    GPU 0,1,2,3,4,5,6: NVIDIA A100-SXM4-80GB
    CUDA_HOME: /usr/local/cuda-11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.64
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.3) 9.4.0
    PyTorch: 1.13.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.0
    OpenCV: 4.8.1
    MMEngine: 0.10.1

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 468658228
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 4
------------------------------------------------------------

2024/01/18 18:02:36 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/coco/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'pytorch'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 12
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        convert_weights=True,
        depths=(
            2,
            2,
            9,
            2,
        ),
        dims=96,
        drop_path_rate=0.2,
        drop_rate=0.0,
        embed_dims=96,
        init_cfg=dict(
            checkpoint=
            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrained=
        '../../ckpts/classification/vssm/vssmtiny/ckpt_epoch_292.pth',
        qk_scale=None,
        qkv_bias=True,
        type='MMDET_VSSM',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_mask=True,
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=80,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        mask_head=dict(
            conv_out_channels=256,
            in_channels=256,
            loss_mask=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_mask=True),
            num_classes=80,
            num_convs=4,
            type='FCNMaskHead'),
        mask_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=14, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            mask_thr_binary=0.5,
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            mask_size=28,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='MaskRCNN')
optim_wrapper = dict(
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ), lr=0.0001, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            absolute_pos_embed=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0),
            relative_position_bias_table=dict(decay_mult=0.0))),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=1000, start_factor=0.001,
        type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
pretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric=[
        'bbox',
        'segm',
    ],
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        ann_file='annotations/instances_train2017.json',
        backend_args=None,
        data_prefix=dict(img='train2017/'),
        data_root='data/coco/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric=[
        'bbox',
        'segm',
    ],
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/mask_rcnn_swin_fpn_coco_tiny'

2024/01/18 18:02:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm0.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm0.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm0.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm0.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm0.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm0.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm1.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm1.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm1.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm1.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm1.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm1.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm2.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm2.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm2.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm2.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm2.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm2.bias:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm3.weight:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm3.weight:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm3.weight:decay_mult=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm3.bias:lr=0.0001
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm3.bias:weight_decay=0.0
2024/01/18 18:03:07 - mmengine - INFO - paramwise_options -- backbone.outnorm3.bias:decay_mult=0.0
Name of parameter - Initialization information

backbone.patch_embed.proj.weight - torch.Size([96, 3, 4, 4]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.proj.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.ln_1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.ln_1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.x_proj_weight - torch.Size([4, 38, 192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.dt_projs_weight - torch.Size([4, 192, 6]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.dt_projs_bias - torch.Size([4, 192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.A_logs - torch.Size([768, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.Ds - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.in_proj.weight - torch.Size([384, 96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.conv2d.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.conv2d.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.out_norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.out_norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.0.self_attention.out_proj.weight - torch.Size([96, 192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.ln_1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.ln_1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.x_proj_weight - torch.Size([4, 38, 192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.dt_projs_weight - torch.Size([4, 192, 6]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.dt_projs_bias - torch.Size([4, 192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.A_logs - torch.Size([768, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.Ds - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.in_proj.weight - torch.Size([384, 96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.conv2d.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.conv2d.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.out_norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.out_norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.blocks.1.self_attention.out_proj.weight - torch.Size([96, 192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.downsample.reduction.weight - torch.Size([192, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.downsample.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.0.downsample.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.ln_1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.ln_1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.x_proj_weight - torch.Size([4, 44, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.dt_projs_weight - torch.Size([4, 384, 12]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.dt_projs_bias - torch.Size([4, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.A_logs - torch.Size([1536, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.Ds - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.in_proj.weight - torch.Size([768, 192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.conv2d.weight - torch.Size([384, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.conv2d.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.out_norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.out_norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.0.self_attention.out_proj.weight - torch.Size([192, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.ln_1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.ln_1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.x_proj_weight - torch.Size([4, 44, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.dt_projs_weight - torch.Size([4, 384, 12]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.dt_projs_bias - torch.Size([4, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.A_logs - torch.Size([1536, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.Ds - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.in_proj.weight - torch.Size([768, 192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.conv2d.weight - torch.Size([384, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.conv2d.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.out_norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.out_norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.blocks.1.self_attention.out_proj.weight - torch.Size([192, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.downsample.reduction.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.downsample.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.1.downsample.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.ln_1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.ln_1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.x_proj_weight - torch.Size([4, 56, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.dt_projs_weight - torch.Size([4, 768, 24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.dt_projs_bias - torch.Size([4, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.A_logs - torch.Size([3072, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.Ds - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.in_proj.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.conv2d.weight - torch.Size([768, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.conv2d.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.out_norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.out_norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.0.self_attention.out_proj.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.ln_1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.ln_1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.x_proj_weight - torch.Size([4, 56, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.dt_projs_weight - torch.Size([4, 768, 24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.dt_projs_bias - torch.Size([4, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.A_logs - torch.Size([3072, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.Ds - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.in_proj.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.conv2d.weight - torch.Size([768, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.conv2d.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.out_norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.out_norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.1.self_attention.out_proj.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.ln_1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.ln_1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.x_proj_weight - torch.Size([4, 56, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.dt_projs_weight - torch.Size([4, 768, 24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.dt_projs_bias - torch.Size([4, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.A_logs - torch.Size([3072, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.Ds - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.in_proj.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.conv2d.weight - torch.Size([768, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.conv2d.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.out_norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.out_norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.2.self_attention.out_proj.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.ln_1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.ln_1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.x_proj_weight - torch.Size([4, 56, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.dt_projs_weight - torch.Size([4, 768, 24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.dt_projs_bias - torch.Size([4, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.A_logs - torch.Size([3072, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.Ds - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.in_proj.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.conv2d.weight - torch.Size([768, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.conv2d.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.out_norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.out_norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.3.self_attention.out_proj.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.ln_1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.ln_1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.x_proj_weight - torch.Size([4, 56, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.dt_projs_weight - torch.Size([4, 768, 24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.dt_projs_bias - torch.Size([4, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.A_logs - torch.Size([3072, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.Ds - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.in_proj.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.conv2d.weight - torch.Size([768, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.conv2d.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.out_norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.out_norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.4.self_attention.out_proj.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.ln_1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.ln_1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.x_proj_weight - torch.Size([4, 56, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.dt_projs_weight - torch.Size([4, 768, 24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.dt_projs_bias - torch.Size([4, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.A_logs - torch.Size([3072, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.Ds - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.in_proj.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.conv2d.weight - torch.Size([768, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.conv2d.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.out_norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.out_norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.5.self_attention.out_proj.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.ln_1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.ln_1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.x_proj_weight - torch.Size([4, 56, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.dt_projs_weight - torch.Size([4, 768, 24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.dt_projs_bias - torch.Size([4, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.A_logs - torch.Size([3072, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.Ds - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.in_proj.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.conv2d.weight - torch.Size([768, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.conv2d.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.out_norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.out_norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.6.self_attention.out_proj.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.ln_1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.ln_1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.x_proj_weight - torch.Size([4, 56, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.dt_projs_weight - torch.Size([4, 768, 24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.dt_projs_bias - torch.Size([4, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.A_logs - torch.Size([3072, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.Ds - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.in_proj.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.conv2d.weight - torch.Size([768, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.conv2d.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.out_norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.out_norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.7.self_attention.out_proj.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.ln_1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.ln_1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.x_proj_weight - torch.Size([4, 56, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.dt_projs_weight - torch.Size([4, 768, 24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.dt_projs_bias - torch.Size([4, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.A_logs - torch.Size([3072, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.Ds - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.in_proj.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.conv2d.weight - torch.Size([768, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.conv2d.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.out_norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.out_norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.blocks.8.self_attention.out_proj.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.downsample.reduction.weight - torch.Size([768, 1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.downsample.norm.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.2.downsample.norm.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.x_proj_weight - torch.Size([4, 80, 1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.dt_projs_weight - torch.Size([4, 1536, 48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.dt_projs_bias - torch.Size([4, 1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.A_logs - torch.Size([6144, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.Ds - torch.Size([6144]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.in_proj.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.conv2d.weight - torch.Size([1536, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.conv2d.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.out_norm.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.out_norm.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.0.self_attention.out_proj.weight - torch.Size([768, 1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.x_proj_weight - torch.Size([4, 80, 1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.dt_projs_weight - torch.Size([4, 1536, 48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.dt_projs_bias - torch.Size([4, 1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.A_logs - torch.Size([6144, 16]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.Ds - torch.Size([6144]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.in_proj.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.conv2d.weight - torch.Size([1536, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.conv2d.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.out_norm.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.out_norm.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layers.3.blocks.1.self_attention.out_proj.weight - torch.Size([768, 1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.outnorm0.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.outnorm0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.outnorm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.outnorm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.outnorm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.outnorm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.outnorm3.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.outnorm3.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.0.conv.weight - torch.Size([256, 96, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 192, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 384, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 768, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([81, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([81]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([320, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([320]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([80, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([80]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2024/01/18 18:03:09 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/01/18 18:03:09 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/01/18 18:03:09 - mmengine - INFO - Checkpoints will be saved to /media/Disk2/LiuYue/Visualize/detection/work_dirs/mask_rcnn_swin_fpn_coco_tiny.
2024/01/18 18:03:51 - mmengine - INFO - Epoch(train)  [1][   50/14659]  base_lr: 5.0000e-06 lr: 5.0000e-06  eta: 1 day, 17:28:38  time: 0.8491  data_time: 0.0728  memory: 14189  loss: 5.0793  loss_rpn_cls: 0.6715  loss_rpn_bbox: 0.1123  loss_cls: 3.3783  acc: 91.3086  loss_bbox: 0.0166  loss_mask: 0.9006
