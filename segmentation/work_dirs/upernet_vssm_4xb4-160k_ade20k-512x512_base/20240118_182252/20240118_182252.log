2024/01/18 18:22:55 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1865403586
    GPU 0,1,2,3,4,5,6: NVIDIA A100-SXM4-80GB
    CUDA_HOME: /usr/local/cuda-11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.64
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.3) 9.4.0
    PyTorch: 1.13.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.0
    OpenCV: 4.8.1
    MMEngine: 0.10.1

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1865403586
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 4
------------------------------------------------------------

2024/01/18 18:22:55 - mmengine - INFO - Config:
backbone_norm_cfg = dict(requires_grad=True, type='LN')
checkpoint_file = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window7_224_20220317-e9b98025.pth'
crop_size = (
    512,
    512,
)
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        512,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'pytorch'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=512,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        act_cfg=dict(type='GELU'),
        attn_drop_rate=0.0,
        depths=(
            2,
            2,
            27,
            2,
        ),
        dims=128,
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window7_224_20220317-e9b98025.pth',
            type='Pretrained'),
        mlp_ratio=4,
        norm_cfg=dict(requires_grad=True, type='LN'),
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        patch_size=4,
        pretrain_img_size=224,
        pretrained=
        '../../ckpts/classification/vssm/vssmbase/ckpt_epoch_260.pth',
        qk_scale=None,
        qkv_bias=True,
        strides=(
            4,
            2,
            2,
            2,
        ),
        type='MMSEG_VSSM',
        use_abs_pos_embed=False,
        window_size=7),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    pretrained=None,
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ), lr=6e-05, type='AdamW', weight_decay=0.01),
    paramwise_cfg=dict(
        custom_keys=dict(
            absolute_pos_embed=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0),
            relative_position_bias_table=dict(decay_mult=0.0))),
    type='OptimWrapper')
optimizer = dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005)
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=1500, start_factor=1e-06,
        type='LinearLR'),
    dict(
        begin=1500,
        by_epoch=False,
        end=160000,
        eta_min=0.0,
        power=1.0,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/upernet_vssm_4xb4-160k_ade20k-512x512_base'

2024/01/18 18:23:00 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.0.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.blocks.1.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.0.downsample.norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.0.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.blocks.1.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.1.downsample.norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.0.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.1.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.2.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.3.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.4.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.5.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.6.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.7.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.8.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.9.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.9.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.9.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.9.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.9.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.9.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.10.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.10.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.10.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.10.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.10.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.10.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.11.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.11.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.11.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.11.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.11.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.11.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.12.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.12.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.12.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.12.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.12.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.12.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.13.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.13.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.13.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.13.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.13.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.13.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.14.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.14.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.14.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.14.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.14.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.14.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.15.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.15.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.15.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.15.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.15.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.15.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.16.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.16.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.16.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.16.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.16.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.16.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.17.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.17.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.17.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.17.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.17.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.17.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.18.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.18.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.18.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.18.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.18.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.18.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.19.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.19.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.19.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.19.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.19.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.19.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.20.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.20.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.20.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.20.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.20.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.20.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.21.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.21.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.21.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.21.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.21.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.21.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.22.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.22.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.22.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.22.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.22.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.22.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.23.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.23.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.23.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.23.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.23.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.23.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.24.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.24.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.24.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.24.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.24.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.24.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.25.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.25.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.25.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.25.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.25.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.25.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.26.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.26.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.26.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.26.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.26.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.blocks.26.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.2.downsample.norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.0.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.layers.3.blocks.1.self_attention.out_norm.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm0.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm0.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm0.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm0.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm0.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm0.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm1.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm1.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm1.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm1.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm1.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm1.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm2.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm2.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm2.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm2.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm2.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm2.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm3.weight:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm3.weight:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm3.weight:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm3.bias:lr=6e-05
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm3.bias:weight_decay=0.0
2024/01/18 18:23:01 - mmengine - INFO - paramwise_options -- backbone.outnorm3.bias:decay_mult=0.0
2024/01/18 18:23:01 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Name of parameter - Initialization information

backbone.patch_embed.proj.weight - torch.Size([128, 3, 4, 4]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.patch_embed.proj.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.patch_embed.norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.patch_embed.norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.ln_1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.ln_1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.x_proj_weight - torch.Size([4, 40, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.dt_projs_weight - torch.Size([4, 256, 8]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.dt_projs_bias - torch.Size([4, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.A_logs - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.Ds - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.in_proj.weight - torch.Size([512, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.conv2d.weight - torch.Size([256, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.conv2d.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.0.self_attention.out_proj.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.ln_1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.ln_1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.x_proj_weight - torch.Size([4, 40, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.dt_projs_weight - torch.Size([4, 256, 8]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.dt_projs_bias - torch.Size([4, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.A_logs - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.Ds - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.in_proj.weight - torch.Size([512, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.conv2d.weight - torch.Size([256, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.conv2d.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.blocks.1.self_attention.out_proj.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.downsample.reduction.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.downsample.norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.downsample.norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.ln_1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.ln_1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.x_proj_weight - torch.Size([4, 48, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.dt_projs_weight - torch.Size([4, 512, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.dt_projs_bias - torch.Size([4, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.A_logs - torch.Size([2048, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.Ds - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.in_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.conv2d.weight - torch.Size([512, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.conv2d.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.out_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.out_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.0.self_attention.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.ln_1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.ln_1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.x_proj_weight - torch.Size([4, 48, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.dt_projs_weight - torch.Size([4, 512, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.dt_projs_bias - torch.Size([4, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.A_logs - torch.Size([2048, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.Ds - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.in_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.conv2d.weight - torch.Size([512, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.conv2d.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.out_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.out_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.blocks.1.self_attention.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.downsample.reduction.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.downsample.norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.downsample.norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.0.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.1.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.2.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.3.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.4.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.5.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.6.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.7.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.8.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.9.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.10.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.11.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.12.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.13.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.14.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.15.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.16.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.17.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.18.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.19.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.20.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.21.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.22.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.23.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.24.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.25.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.x_proj_weight - torch.Size([4, 64, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.dt_projs_weight - torch.Size([4, 1024, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.dt_projs_bias - torch.Size([4, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.A_logs - torch.Size([4096, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.Ds - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.in_proj.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.conv2d.weight - torch.Size([1024, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.conv2d.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.out_norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.out_norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.blocks.26.self_attention.out_proj.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.downsample.reduction.weight - torch.Size([1024, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.downsample.norm.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.downsample.norm.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.ln_1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.ln_1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.x_proj_weight - torch.Size([4, 96, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.dt_projs_weight - torch.Size([4, 2048, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.dt_projs_bias - torch.Size([4, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.A_logs - torch.Size([8192, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.Ds - torch.Size([8192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.in_proj.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.conv2d.weight - torch.Size([2048, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.conv2d.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.out_norm.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.out_norm.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.0.self_attention.out_proj.weight - torch.Size([1024, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.ln_1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.ln_1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.x_proj_weight - torch.Size([4, 96, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.dt_projs_weight - torch.Size([4, 2048, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.dt_projs_bias - torch.Size([4, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.A_logs - torch.Size([8192, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.Ds - torch.Size([8192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.in_proj.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.conv2d.weight - torch.Size([2048, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.conv2d.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.out_norm.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.out_norm.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.blocks.1.self_attention.out_proj.weight - torch.Size([1024, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.outnorm0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.outnorm0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.outnorm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.outnorm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.outnorm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.outnorm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.outnorm3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.outnorm3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([150, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([150]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 3072, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.0.conv.weight - torch.Size([512, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.1.conv.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.2.conv.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.0.conv.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.1.conv.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.2.conv.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_bottleneck.conv.weight - torch.Size([512, 2048, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.fpn_bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([150, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([150]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2024/01/18 18:23:02 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/01/18 18:23:02 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/01/18 18:23:02 - mmengine - INFO - Checkpoints will be saved to /media/Disk2/LiuYue/Visualize/segmentation/work_dirs/upernet_vssm_4xb4-160k_ade20k-512x512_base.
2024/01/18 18:23:54 - mmengine - INFO - Iter(train) [    50/160000]  base_lr: 1.9614e-06 lr: 1.9614e-06  eta: 1 day, 22:33:27  time: 0.8839  data_time: 0.0090  memory: 42084  loss: 5.6463  decode.loss_ce: 4.0265  decode.acc_seg: 0.6609  aux.loss_ce: 1.6198  aux.acc_seg: 0.5043
